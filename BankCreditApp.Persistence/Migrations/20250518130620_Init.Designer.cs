// <auto-generated />
using System;
using BankCreditApp.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankCreditApp.Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250518130620_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankCreditApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CreditApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApprovedTerm")
                        .HasColumnType("int");

                    b.Property<decimal?>("AssignedInterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreditTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestedTerm")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreditTypeId");

                    b.ToTable("CreditApplications", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CreditType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseInterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxTerm")
                        .HasColumnType("int");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinTerm")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CreditTypes", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);

                    b.HasDiscriminator<string>("CustomerType").HasValue("Customer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateApplicationUser", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.ApplicationUser");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("Corporate");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualApplicationUser", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.ApplicationUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCreditApplication", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.CreditApplication");

                    b.Property<decimal?>("CollateralValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyAgeInMonths")
                        .HasColumnType("int");

                    b.Property<Guid>("CorporateCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentAnnualTurnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("HasCollateral")
                        .HasColumnType("bit");

                    b.HasIndex("CorporateCustomerId");

                    b.ToTable("CorporateCreditApplications", (string)null);
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCreditApplication", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.CreditApplication");

                    b.Property<decimal>("CurrentCreditScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("GuarantorIdentityNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<bool>("HasGuarantor")
                        .HasColumnType("bit");

                    b.Property<Guid>("IndividualCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("IndividualCreditApplications", (string)null);
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCreditType", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.CreditType");

                    b.Property<decimal>("MinAnnualTurnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinCompanyAge")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresCollateral")
                        .HasColumnType("bit");

                    b.ToTable("CorporateCreditTypes", (string)null);
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCreditType", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.CreditType");

                    b.Property<int?>("MaxAge")
                        .HasColumnType("int");

                    b.Property<decimal>("MinCreditScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("MinMonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("RequiresGuarantor")
                        .HasColumnType("bit");

                    b.ToTable("IndividualCreditTypes", (string)null);
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCustomer", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.Customer");

                    b.Property<decimal>("AnnualTurnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AuthorizedPersonName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("Customers", (string)null);

                    b.HasDiscriminator().HasValue("Corporate");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCustomer", b =>
                {
                    b.HasBaseType("BankCreditApp.Domain.Entities.Customer");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("MonthlyIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("Customers", (string)null);

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CreditApplication", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CreditType", "CreditType")
                        .WithMany("CreditApplications")
                        .HasForeignKey("CreditTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreditType");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BankCreditApp.Domain.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCreditApplication", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CorporateCustomer", "CorporateCustomer")
                        .WithMany()
                        .HasForeignKey("CorporateCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankCreditApp.Domain.Entities.CreditApplication", null)
                        .WithOne()
                        .HasForeignKey("BankCreditApp.Domain.Entities.CorporateCreditApplication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CorporateCustomer");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCreditApplication", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CreditApplication", null)
                        .WithOne()
                        .HasForeignKey("BankCreditApp.Domain.Entities.IndividualCreditApplication", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankCreditApp.Domain.Entities.IndividualCustomer", "IndividualCustomer")
                        .WithMany()
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCreditType", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CreditType", null)
                        .WithOne()
                        .HasForeignKey("BankCreditApp.Domain.Entities.CorporateCreditType", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCreditType", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CreditType", null)
                        .WithOne()
                        .HasForeignKey("BankCreditApp.Domain.Entities.IndividualCreditType", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateCustomer", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.CorporateApplicationUser", null)
                        .WithOne("CorporateCustomer")
                        .HasForeignKey("BankCreditApp.Domain.Entities.CorporateCustomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualCustomer", b =>
                {
                    b.HasOne("BankCreditApp.Domain.Entities.IndividualApplicationUser", null)
                        .WithOne("IndividualCustomer")
                        .HasForeignKey("BankCreditApp.Domain.Entities.IndividualCustomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CreditType", b =>
                {
                    b.Navigation("CreditApplications");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.CorporateApplicationUser", b =>
                {
                    b.Navigation("CorporateCustomer");
                });

            modelBuilder.Entity("BankCreditApp.Domain.Entities.IndividualApplicationUser", b =>
                {
                    b.Navigation("IndividualCustomer");
                });
#pragma warning restore 612, 618
        }
    }
}
